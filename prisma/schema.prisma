// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserToken {
  sessionId    String   @id
  accessToken  String
  refreshToken String
  expiresAt    DateTime
}

model User {
  id          String  @id
  username    String
  avatar      String?
}

model Parlor {
  id          Int             @id @default(autoincrement())
  name        String
  location    String
  owner       String
  website     String?
  note        String
  members     ParlorMember[]
  events      Event[]
  rulesets    Ruleset[]
}

model ParlorMember {
  id       Int      @id @default(autoincrement())
  parlor   Parlor   @relation(fields: [parlorId], references: [id])
  parlorId Int
  userId   String
}

model Event {
  id          Int     @id @default(autoincrement())
  name        String
  location    String
  description String
  parlor      Parlor  @relation(fields: [parlorId], references: [id])
  parlorId    Int
  ruleset     Ruleset @relation(fields: [rulesetId], references: [id])
  rulesetId   Int
}

enum Players {
  FOUR
  THREE
}

enum GameLength {
  HANCHAN
  TONPU
}

enum TiebreakerPolicy {
  SPLIT
  WIND
}

enum EndgamePolicy {
  DISAPPEARS
  TOP
}

enum RenchanPolicy {
  TENPAI
  AGARI
  NONE
  ALWAYS
}

enum AllLastPolicy {
  AGARIYAME
  TENPAIYAME
  NONE
}

enum MultiRonPotPolicy {
  ATAMAHANE
  SPLIT
}

enum MultiRonHonbaPolicy {
  ATAMAHANE
  SPLIT
  ALL
}

enum Record {
  GAME
  HAND
}

model Ruleset {
  id                  Int     @id @default(autoincrement())

  name                String

  player              Players
  length              GameLength

  startScore          Int
  returnScore         Int
  /// [Uma]
  uma                 Json
  honba               Int
  tenpaiFee           Int

  endgamePot          EndgamePolicy
  tiebreaker          TiebreakerPolicy
  renchan             RenchanPolicy
  allLast             AllLastPolicy
  allLastPlacement    Int?

  doubleRon           Boolean
  tripleRon           Boolean
  multiRonPotPolicy   MultiRonPotPolicy
  multiRonHonbaPolicy MultiRonHonbaPolicy

  record              Record

  /// [Score]
  scores              Json

  nagashi             String
  nagashiIsTsumo      Boolean

  /// [Chonbo]
  chonbo              Json

  oyaNagashi          Boolean

  tobi                Boolean
  tobiAtZero          Boolean
  riichiBelow1000     Boolean
  suddenDeath         Int?
  calledGame          Int?

  note                String

  events              Event[]
  parlor              Parlor @relation(fields: [parlorId], references: [id])
  parlorId            Int
}