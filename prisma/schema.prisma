// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserToken {
  sessionId    String   @id
  accessToken  String
  refreshToken String
  expiresAt    DateTime
}

model User {
  id          String  @id
  username    String
  avatar      String?
}

model Parlor {
  id          Int             @id @default(autoincrement())
  name        String
  location    String
  owner       String
  website     String?
  note        String
  members     ParlorMember[]
  events      Event[]
  rulesets    Ruleset[]
}

model ParlorMember {
  id       Int      @id @default(autoincrement())
  parlor   Parlor   @relation(fields: [parlorId], references: [id])
  parlorId Int
  userId   String
}

model Event {
  id          Int     @id @default(autoincrement())
  name        String
  date        DateTime
  location    String
  description String
  parlor      Parlor  @relation(fields: [parlorId], references: [id])
  parlorId    Int
  ruleset     Ruleset @relation(fields: [rulesetId], references: [id])
  rulesetId   Int
}

enum GameType {
  THREE_PLAYER_EAST
  THREE_PLAYER_HANCHAN
  FOUR_PLAYER_EAST
  FOUR_PLAYER_HANCHAN
}

enum TiebreakerPolicy {
  SPLIT
  WIND
}

enum EndgamePolicy {
  DISAPPEARS
  TOP
  DEALER
}

enum RenchanPolicy {
  NONE
  TENPAI
  AGARI
}

enum AllLastPolicy {
  AGARIYAME_FIRST
  AGARIYAME_SECOND
  AGARIYAME_THIRD
  AGARIYAME_ANY
  TENPAIYAME_FIRST
  TENPAIYAME_SECOND
  TENPAIYAME_THIRD
  TENPAIYAME_ANY
  NONE
}

enum MultironPotPolicy {
  ATAMAHANE
  SPLIT
}

model Ruleset {
  id                  Int     @id @default(autoincrement())

  name                String

  type                GameType

  startScore          Int
  returnScore         Int
  /// [Uma]
  uma                 Json
  honba               Int
  tenpaiFee           Int

  endgamePot          EndgamePolicy
  tiebreaker          TiebreakerPolicy
  renchan             RenchanPolicy
  allLast             AllLastPolicy

  doubleRon           Boolean
  tripleRon           Boolean
  multiRonPotPolicy   MultironPotPolicy

  nagashi             String
  nagashiIsTsumo      Boolean

  chonbo              String
  chonboAffectsScore  Boolean

  oyaNagashi          Boolean
  suddenDeath         Int?

  tobi                Boolean
  tobiAtZero          Boolean
  calledGame          Int?
  riichiBelow1000     Boolean

  /// [Score]
  scores              Json

  note                String

  events              Event[]
  parlor              Parlor @relation(fields: [parlorId], references: [id])
  parlorId            Int
}