generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserToken {
  sessionId    String   @id
  accessToken  String
  refreshToken String
  expiresAt    DateTime
}

model User {
  id              String  @id
  avatar          String?
  username        String
  attendedEvents  EventAttendee[]
  games           GamePlayer[]
}

model Parlor {
  id       Int            @id @default(autoincrement())
  name     String
  location String
  owner    String
  website  String?
  note     String
  events   Event[]
  members  ParlorMember[]
  rulesets Ruleset[]
}

model ParlorMember {
  id       Int    @id @default(autoincrement())
  parlorId Int
  userId   String
  parlor   Parlor @relation(fields: [parlorId], references: [id])
}

model Event {
  id              Int                @id @default(autoincrement())
  name            String
  location        String
  description     String
  parlorId        Int
  rulesetId       Int
  /// [EventJoinPolicy]
  joinPolicy      Json
  parlor          Parlor             @relation(fields: [parlorId], references: [id])
  ruleset         Ruleset            @relation(fields: [rulesetId], references: [id])
  attendees       EventAttendee[]
  games           Game[]
}

model EventAttendee {
  user    User                   @relation(fields: [userId], references: [id])
  userId  String
  eventId Int
  status  EventJoinRequestStatus
  event   Event                  @relation(fields: [eventId], references: [id])
  @@id([userId, eventId])
}

model Game {
  id              Int      @id @default(autoincrement())
  name            String
  table           Int
  startTime       DateTime?
  durationSeconds Int
  players         GamePlayer[]
  /// [Actions]
  actions         Json
  event           Event    @relation(fields: [eventId], references: [id])
  eventId         Int
}

model GamePlayer {
  gameId  Int
  userId  String
  user    User    @relation(fields: [userId], references: [id])
  game    Game    @relation(fields: [gameId], references: [id])
  index   Int
  @@id([gameId, userId])
}

model Ruleset {
  id                  Int                 @id @default(autoincrement())
  name                String
  startScore          Int
  returnScore         Int
  /// [Uma]
  uma                 Json
  honba               Int
  tenpaiFee           Int
  endgamePot          EndgamePolicy
  tiebreaker          TiebreakerPolicy
  renchan             RenchanPolicy
  allLast             AllLastPolicy
  doubleRon           Boolean
  tripleRon           Boolean
  nagashi             String
  nagashiIsTsumo      Boolean
  oyaNagashi          Boolean
  suddenDeath         Int?
  tobi                Boolean
  tobiAtZero          Boolean
  calledGame          Int?
  riichiBelow1000     Boolean
  /// [Score]
  scores              Json
  note                String
  parlorId            Int
  allLastPlacement    Int?
  multiRonHonbaPolicy MultiRonHonbaPolicy
  multiRonPotPolicy   MultiRonPotPolicy
  length              GameLength
  player              Players
  record              Record
  /// [Chonbo]
  chonbo              Json
  events              Event[]
  parlor              Parlor              @relation(fields: [parlorId], references: [id])
}

enum EventJoinRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Players {
  FOUR
  THREE
}

enum GameLength {
  HANCHAN
  TONPU
}

enum TiebreakerPolicy {
  SPLIT
  WIND
}

enum EndgamePolicy {
  DISAPPEARS
  TOP
}

enum RenchanPolicy {
  NONE
  TENPAI
  AGARI
  ALWAYS
}

enum AllLastPolicy {
  AGARIYAME
  TENPAIYAME
  NONE
}

enum MultiRonPotPolicy {
  ATAMAHANE
  SPLIT
}

enum MultiRonHonbaPolicy {
  ATAMAHANE
  SPLIT
  ALL
}

enum Record {
  GAME
  HAND
}
